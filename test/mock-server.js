// Generated by CoffeeScript 1.9.1
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function(angular) {
    'use strict';
    return angular.module('MockServer', []).factory('mockserver', function() {
      var service;
      service = {
        callbacks: [],
        clientReplyFunc: void 0,
        blacklist: ['id', 'createdAt', 'modifiedAt'],
        subscribers: [],
        listenerid: 1,
        objects: {
          1: {
            id: 1,
            name: 'Foo 1',
            type: 'Foo',
            createdAt: Date.now(),
            modifiedAt: void 0
          },
          2: {
            id: 2,
            name: 'Bar 1',
            type: 'Bar',
            createdAt: Date.now(),
            modifiedAt: void 0
          }
        },
        'on': function(channel, callback) {
          console.log('mockserver on called for channel "' + channel + '"');
          service.callbacks[channel] = callback;
          return service.clientReplyFunc = callback;
        },
        'emit': function(channel, messagestr) {
          var message;
          message = JSON.parse(messagestr);
          console.log('mockserver emit called for channel "' + channel + '" ' + message.target);
          switch (message['target']) {
            case 'getModelFor':
              return service.getModelFor(message);
            case 'registerForUpdatesOn':
              return service.registerForUpdatesOn(message);
            case 'deRegisterForUpdatesOn':
              return service.deRegisterForUpdatesOn(message);
            case 'updateObject':
              return service.updateObject(message);
            case 'Foo_create':
              return service.createFoo(msg);
            case 'Foo_delete':
              return service.deleteFoo(msg);
            case 'Foo_get':
              return service.getFoo(msg);
            case 'Foo_list':
              return service.listFoo(msg);
            case 'Bar_create':
              return service.createBar(msg);
            case 'Bar_delete':
              return service.deleteBar(msg);
            case 'Bar_get':
              return service.getBar(msg);
            case 'Bar_list':
              return service.listBar(msg);
          }
        },
        getModelFor: function(msgstr) {
          var msg;
          msg = JSON.pars(msgstr);
          return service.clientReplyFunc({
            messageId: msg.messageId,
            status: 'SUCCESS',
            info: 'get model',
            payload: [
              {
                name: 'name',
                "public": true,
                value: 'name'
              }, {
                name: 'createdAt',
                "public": true,
                value: 'createdAt'
              }, {
                name: 'modifiedAt',
                "public": true,
                value: 'modifiedAt'
              }
            ]
          });
        },
        registerForUpdatesOn: function(msg) {
          var subs;
          console.log('registerForUpdatesOn called for ' + msg.obj.id);
          subs = service.subscribers[msg.obj.id] || [];
          subs[service.listenerid] = function(o) {
            return service.clientReplyFunc({
              status: 'SUCCESS',
              info: 'OBJECT_UPDATE',
              payload: o
            });
          };
          service.subscribers[msg.obj.id] = subs;
          return service.clientReplyFunc({
            messageId: msg.messageId,
            status: 'SUCCESS',
            info: 'REGISTER_UPDATES',
            payload: service.listenerid++
          });
        },
        deRegisterForUpdatesOn: function(msg) {
          var subs;
          subs = service.subscribers[msg.id] || [];
          return delete subs[msg.listenerid];
        },
        updateObject: function(msg) {
          var cb, k, lid, o, ref, ref1, ref2, results, v;
          o = service.objects[msg.obj.id];
          ref = msg.obj;
          for (k in ref) {
            v = ref[k];
            if (ref1 = !k, indexOf.call(service.blacklist, ref1) >= 0) {
              o[k] = msg.obj[k];
            }
          }
          ref2 = service.subscribers[msg.obj.id];
          results = [];
          for (lid in ref2) {
            cb = ref2[lid];
            results.push(cb(o));
          }
          return results;
        },
        createFoo: function(msg) {},
        deleteFoo: function(msg) {},
        getFoo: function(msg) {},
        listFoo: function(msg) {},
        createBar: function(msg) {},
        deleteBar: function(msg) {},
        getBar: function(msg) {},
        listBar: function(msg) {}
      };
      return service;
    });
  })(angular);

}).call(this);

//# sourceMappingURL=mock-server.js.map
