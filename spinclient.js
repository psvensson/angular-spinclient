// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('angular-spinclient', [uuid4, $websocket]).factory('ngSpinclient', [
    function() {
      var service;
      service = {
        subscribers: [],
        objsubscribers: [],
        outstandingMessages: [],
        io: $websocket(),
        registerListener: function(e, detail, sender) {
          var subscribers;
          subscribers = service.subscribers[detail.message] || [];
          subscribers.push(detail.callback);
          service.subscribers[detail.message] = subscribers;
        },
        registerObjectSubscriber: function(e, detail, sender) {
          var subscribers;
          console.log('message-router registering subscriber for object \'' + detail.obj.id + '\' type ' + detail.obj.type);
          subscribers = service.objsubscribers[detail.obj.id] || [];
          subscribers.push(detail.callback);
          service.objsubscribers[detail.obj.id] = subscribers;
          service.io.emit('message', JSON.stringify({
            target: 'registerForUpdatesOn',
            messageId: uuid4.generate(),
            obj: detail.obj
          }));
        },
        emitMessage: function(e, detail, sender) {
          console.log('emitMessage called');
          console.dir(detail);
          detail.messageId = uuid4.generate();
          service.outstandingMessages.push(detail);
          service.io.emit('message', JSON.stringify(detail));
        }
      };
      service.subscribers['OBJECT_UPDATE'] = [
        function(obj) {
          var subscribers;
          console.log('+++++++++++ obj update message router got obj');
          subscribers = service.objsubscribers[obj.id] || [];
          if (subscribers.length === 0) {
            console.log('* OH NOES! * No subscribers for object update on object ' + obj.id);
            return console.dir(service.objsubscribers);
          } else {
            return subscribers.forEach(function(subscriber) {
              return subscriber(obj);
            });
          }
        }
      ];
      service.io.on('message', function(reply) {
        var detail, i, index, info, message, status, subscribers;
        status = reply.status;
        message = reply.payload;
        info = reply.info;
        console.log('got reply id ' + reply.messageId + ' status ' + status + ', info ' + info + ' data ' + message);
        console.dir(reply);
        index = -1;
        if (reply.messageId) {
          i = 0;
          while (i < service.outstandingMessages.length) {
            detail = service.outstandingMessages[i];
            if (detail.messageId === reply.messageId) {
              detail.callback(message);
              index = i;
              break;
            }
            i++;
          }
          if (index > 0) {
            service.outstandingMessages.splice(index, 1);
          }
        } else {
          subscribers = service.subscribers[info];
          if (subscribers) {
            subscribers.forEach(function(listener) {
              listener(message);
            });
          } else {
            console.log('no subscribers for message ' + message);
            console.dir(reply);
          }
        }
      });
      return service;
    }
  ]);

}).call(this);

//# sourceMappingURL=spinclient.js.map
