// Generated by CoffeeScript 1.9.1
(function() {
  angular.module('angular-spinclient', ['uuid4', 'ngWebSocket', 'ngMaterial']).factory('ngSpinClient', function(uuid4, $websocket, $q) {
    var service;
    service = {
      subscribers: [],
      objsubscribers: [],
      outstandingMessages: [],
      modelcache: [],
      io: io('ws://localhost:3003'),
      registerListener: function(detail) {
        var subscribers;
        subscribers = service.subscribers[detail.message] || [];
        subscribers.push(detail.callback);
        return service.subscribers[detail.message] = subscribers;
      },
      registerObjectSubscriber: function(detail) {
        var d, subscribers;
        console.dir(detail);
        if (!detail.cb) {
          console.log('***************************************************************** AUGH *********************************************************************');
          xyzzy;
        }
        d = $q.defer();
        subscribers = service.objsubscribers[detail.id] || [];
        service.emitMessage({
          target: 'registerForUpdatesOn',
          messageId: uuid4.generate(),
          obj: {
            id: detail.id,
            type: detail.type
          }
        }).then(function(reply) {
          subscribers[reply] = detail.cb;
          service.objsubscribers[detail.id] = subscribers;
          return d.resolve(reply);
        });
        return d.promise;
      },
      deRegisterObjectSubscriber: (function(_this) {
        return function(sid, o) {
          var subscribers;
          subscribers = service.objsubscribers[o.id] || [];
          if (subscribers && subscribers[sid]) {
            delete subscribers[sid];
            service.objsubscribers[o.id] = subscribers;
            return service.emitMessage({
              target: 'deRegisterForUpdatesOn',
              id: o.id,
              type: o.type,
              listenerid: sid
            }).then(function(reply) {});
          }
        };
      })(this),
      emitMessage: function(detail) {
        var d;
        d = $q.defer();
        detail.messageId = uuid4.generate();
        service.outstandingMessages.push(detail);
        service.io.emit('message', JSON.stringify(detail));
        detail.d = d;
        return d.promise;
      },
      getModelFor: function(type) {
        var d;
        d = $q.defer();
        if (service.modelcache[type]) {
          d.resolve(service.modelcache[type]);
        } else {
          service.emitMessage({
            target: 'getModelFor',
            modelname: type
          }).then(function(model) {
            service.modelcache[type] = model;
            return d.resolve(model);
          });
        }
        return d.promise;
      },
      listTargets: function() {
        var d;
        d = $q.defer();
        service.emitMessage({
          target: 'listcommands'
        }).then(function(targets) {
          return d.resolve(targets);
        });
        return d.promise;
      },
      flattenModel: function(model) {
        var k, rv, v;
        rv = {};
        for (k in model) {
          v = model[k];
          if (angular.isArray(v)) {
            rv[k] = v.map(function(e) {
              return e.id;
            });
          } else {
            rv[k] = v;
          }
        }
        return rv;
      }
    };
    service.subscribers['OBJECT_UPDATE'] = [
      function(obj) {
        var k, results1, subscribers, v;
        console.log('+++++++++++ obj update message router got obj');
        subscribers = service.objsubscribers[obj.id] || [];
        results1 = [];
        for (k in subscribers) {
          v = subscribers[k];
          results1.push(v(obj));
        }
        return results1;
      }
    ];
    service.io.on('message', function(reply) {
      var detail, i, index, info, message, status, subscribers;
      status = reply.status;
      message = reply.payload;
      info = reply.info;
      index = -1;
      if (reply.messageId) {
        i = 0;
        while (i < service.outstandingMessages.length) {
          detail = service.outstandingMessages[i];
          if (detail.messageId === reply.messageId) {
            if (reply.status === 'FAILURE') {
              detail.d.reject(reply);
            } else {
              detail.d.resolve(message);
              index = i;
              break;
            }
          }
          i++;
        }
        if (index > 0) {
          service.outstandingMessages.splice(index, 1);
        }
      } else {
        subscribers = service.subscribers[info];
        if (subscribers) {
          subscribers.forEach(function(listener) {
            listener(message);
          });
        } else {
          console.log('no subscribers for message ' + message);
          console.dir(reply);
        }
      }
    });
    return service;
  }).directive('alltargets', [
    'ngSpinClient', function(client) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'alltargets.html',
        link: function(scope, elem, attrs) {},
        controller: function($scope) {
          var failure, success;
          $scope.results = [];
          console.log('alltargets controller');
          $scope.onitemselect = (function(_this) {
            return function(item) {
              console.log('alltargets item selected ' + item.id);
              return $scope.itemselected = item;
            };
          })(this);
          client.listTargets().then(function(_targets) {
            var k, results1, v;
            $scope.targets = [];
            results1 = [];
            for (k in _targets) {
              v = _targets[k];
              results1.push($scope.targets.push({
                name: k,
                argnames: v,
                args: v
              }));
            }
            return results1;
          });
          success = function(results) {
            $scope.results = results;
            return console.dir($scope.results);
          };
          failure = function(reply) {
            console.log('failure' + reply);
            return $scope.status = reply.status + ' - ' + reply.info;
          };
          return $scope.callTarget = function(t) {
            var callobj, i, values;
            $scope.status = "";
            console.log('calltarget called with ' + t.name);
            callobj = {
              target: t.name
            };
            if (t.argnames !== "<none>") {
              values = t.args.split(',');
              i = 0;
              t.argnames.split(',').forEach(function(arg) {
                return callobj[arg] = values[i++];
              });
            }
            return client.emitMessage(callobj).then(success, failure);
          };
        }
      };
    }
  ]).directive('spinmodel', [
    'ngSpinClient', function(client) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'spinmodel.html',
        scope: {
          model: '=model',
          edit: '=edit',
          onselect: '&'
        },
        link: function(scope, elem, attrs) {
          return scope.onselect = scope.onselect();
        },
        controller: function($scope) {
          var failure, success;
          console.log('spinmodel got model');
          console.dir($scope.model);
          $scope.isarray = angular.isArray;
          $scope.subscriptions = [];
          $scope.onSubscribedObject = function(o) {
            return $scope.model = o;
          };
          if ($scope.model) {
            client.registerObjectSubscriber({
              id: $scope.model.id,
              type: $scope.model.type,
              cb: $scope.onSubscribedObject
            }).then(function(listenerid) {
              return $scope.subscriptions.push({
                sid: listenerid,
                o: $scope.model
              });
            });
          }
          $scope.$watch('model', function(newval, oldval) {
            return $scope.renderModel();
          });
          success = (function(_this) {
            return function(result) {
              return console.log('success: ' + result);
            };
          })(this);
          failure = (function(_this) {
            return function(err) {
              return console.log('error: ' + err);
            };
          })(this);
          $scope.onChange = (function(_this) {
            return function(model, prop) {
              console.log('onChange called for');
              console.dir(model);
              return client.emitMessage({
                target: 'updateObject',
                obj: model
              }).then(success, failure);
            };
          })(this);
          $scope.renderModel = (function(_this) {
            return function() {
              $scope.listprops = [];
              return client.getModelFor($scope.model.type).then(function(md) {
                var i, j, l, len, len1, modeldef, prop, ref, ref1, results1;
                modeldef = {};
                md.forEach(function(modelprop) {
                  return modeldef[modelprop.name] = modelprop;
                });
                if ($scope.model) {
                  $scope.listprops.push({
                    name: 'id',
                    value: $scope.model.id
                  });
                  for (i = j = 0, len = md.length; j < len; i = ++j) {
                    prop = md[i];
                    if (prop.name !== 'id' && angular.isArray($scope.model[prop.name]) === false) {
                      $scope.listprops.push({
                        name: prop.name,
                        value: $scope.model[prop.name] || "",
                        type: (ref = modeldef[prop.name]) != null ? ref.type : void 0
                      });
                    }
                  }
                  results1 = [];
                  for (i = l = 0, len1 = md.length; l < len1; i = ++l) {
                    prop = md[i];
                    if (prop.name !== 'id' && angular.isArray($scope.model[prop.name]) === true) {
                      results1.push($scope.listprops.push({
                        name: prop.name,
                        value: $scope.model[prop.name],
                        type: (ref1 = modeldef[prop.name]) != null ? ref1.type : void 0
                      }));
                    } else {
                      results1.push(void 0);
                    }
                  }
                  return results1;
                }
              });
            };
          })(this);
          $scope.addModel = function(type, propname) {
            console.log('addModel called for type ' + type);
            return client.emitMessage({
              target: '_create' + type,
              obj: {
                name: 'new ' + type,
                type: type
              }
            }).then((function(_this) {
              return function(o) {
                $scope.model[propname].push(o.id);
                console.log('parent model is now');
                console.dir($scope.model);
                return client.emitMessage({
                  target: 'updateObject',
                  obj: $scope.model
                }).then(success, failure);
              };
            })(this), failure);
          };
          return $scope.$on('$destroy', (function(_this) {
            return function() {
              console.log('spinmodel captured $destroy event');
              return $scope.subscriptions.forEach(function(s) {
                return client.deRegisterObjectSubscriber(s.sid, s.o);
              });
            };
          })(this));
        }
      };
    }
  ]).directive('spinwalker', [
    'ngSpinClient', function(client) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'spinwalker.html',
        scope: {
          model: '=model',
          edit: '=edit'
        },
        link: function(scope, elem, attrs) {},
        controller: function($scope) {
          $scope.selectedmodel = $scope.model;
          $scope.breadcrumbs = [$scope.model];
          $scope.crumbClicked = function(model) {
            var crumb, i, idx, j, len, ref;
            $scope.selectedmodel = model;
            idx = -1;
            ref = $scope.breadcrumbs;
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
              crumb = ref[i];
              if (crumb.id = model.id) {
                idx = i;
              }
            }
            if (idx !== -1 && $scope.breadcrumbs.length > 0) {
              return $scope.breadcrumbs.splice(idx, 1);
            }
          };
          return $scope.onselect = function(listmodel) {
            $scope.selectedmodel = listmodel;
            return $scope.breadcrumbs.push(listmodel);
          };
        }
      };
    }
  ]).directive('spinlist', [
    'ngSpinClient', function(client) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'spinlist.html',
        scope: {
          list: '=list',
          listmodel: '=listmodel',
          onselect: '&'
        },
        link: function(scope, elem, attrs) {
          return scope.onselect = scope.onselect();
        },
        controller: function($scope) {
          var failure, j, len, modelid, ref, success;
          console.log('spinlist created. list is ' + $scope.list + ' type is ' + $scope.listmodel);
          $scope.subscriptions = [];
          $scope.objects = [];
          $scope.expandedlist = [];
          success = (function(_this) {
            return function(result) {
              return console.log('success: ' + result);
            };
          })(this);
          failure = (function(_this) {
            return function(err) {
              return console.log('error: ' + err);
            };
          })(this);
          $scope.selectItem = (function(_this) {
            return function(item) {
              if ($scope.onselect) {
                return $scope.onselect(item);
              }
            };
          })(this);
          ref = $scope.list;
          for (j = 0, len = ref.length; j < len; j++) {
            modelid = ref[j];
            client.emitMessage({
              target: '_get' + $scope.listmodel,
              obj: {
                id: modelid,
                type: $scope.listmodel
              }
            }).then(function(o) {
              var i, l, len1, mid, ref1, results1;
              ref1 = $scope.list;
              results1 = [];
              for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
                mid = ref1[i];
                if (mid === o.id) {
                  console.log('-- exhanging list id with actual list model from server for ' + o.name);
                  results1.push($scope.expandedlist[i] = o);
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            }, failure);
          }
          $scope.onSubscribedObject = function(o) {
            var added, i, k, l, len1, mid, model, ref1, v;
            console.dir(o);
            added = false;
            ref1 = $scope.list;
            for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
              mid = ref1[i];
              if (mid === o.id) {
                console.log('found match in update for object ' + o.id + ' name ' + o.name);
                model = $scope.expandedlist[i];
                for (k in o) {
                  v = o[k];
                  added = true;
                  model[k] = v;
                }
              }
            }
            if (!added) {
              $scope.expandedlist.push(o);
            }
            return $scope.$apply();
          };
          $scope.list.forEach(function(id) {
            if (id) {
              return client.registerObjectSubscriber({
                id: id,
                type: $scope.listmodel,
                cb: $scope.onSubscribedObject
              }).then(function(listenerid) {
                return $scope.subscriptions.push({
                  sid: listenerid,
                  o: {
                    type: $scope.listmodel,
                    id: id
                  }
                });
              });
            }
          });
          return $scope.$on('$destroy', (function(_this) {
            return function() {
              console.log('spinlist captured $destroy event');
              return $scope.subscriptions.forEach(function(s) {
                return client.deRegisterObjectSubscriber(s.sid, s.o);
              });
            };
          })(this));
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=spinclient.js.map
